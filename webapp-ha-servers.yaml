AWSTemplateFormatVersion: "2010-09-09"

Description: >
  My (Mark-Anthony) Udagram High-Availability Servers template.

Parameters:
  # Parameters are entirely optional.
  # but using them will make your cloudformation templates more reusable
  # use them for things that may change over time, such as instance type,
  # VPCs and so on.
  #
  # Rubric:
  # - The more the better, but an exaggerated number of parameters can be messy ( say, 10 or more ). 1 or 0 is definitely lacking.

  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:

  # IAM S3 roles, policies, and instance profiles
  UdacityS3ReadOnlyEC2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: S3ReadOnly
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                Resource:
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - Fn::ImportValue: !Sub "${EnvironmentName}-S3-BUCKET"
                      - '/*'
                  - !Join
                    - ''
                    - - 'arn:aws:s3:::'
                      - Fn::ImportValue: !Sub "${EnvironmentName}-S3-BUCKET"

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

  # Security Groups
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our load balancer
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to our hosts and SSH from local only
      VpcId:
        Fn::ImportValue:
          !Sub "${EnvironmentName}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          # Only bring in when needed.
#        - IpProtocol: tcp
#          FromPort: 22
#          ToPort: 22
#          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  # Compute
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      UserData:
        Fn::Base64: !Sub
          - |
            #!/bin/bash -x
            apt-get update -y
            apt-get install unzip awscli -y
            apt-get install apache2 -y
            systemctl start apache2.service
            cd /var/www/html
            echo "s3 cp s3://${S3Bucket}/site-files.zip ."
            aws s3 cp s3://${S3Bucket}/site-files.zip .
            unzip -o site-files.zip

          - S3Bucket:
              Fn::ImportValue:
                !Sub "${EnvironmentName}-S3-BUCKET"

      ImageId: ami-003634241a8fcdec0
      # Only bring-in when needed.
      # KeyName: jumpbox-key
      SecurityGroups:
        - Ref: WebServerSecGroup
      InstanceType: t3.small
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: '10'

  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '8'
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - Ref: LBSecGroup

  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'Listener'
      Priority: 1

  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

Outputs:
  LoadBalancerUrl:
    Description: Web Stack Load Balancer URL.
    Value: !Join ['', ['http://', !GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LB-URL
